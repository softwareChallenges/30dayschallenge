Question:-
61. Rotate List
Given the head of a linked list, rotate the list to the right by k places.

Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]


Explanation

1 Approach

		Here in rotate if we see last nod eis come first in first rotation and other list remains same
		 1. assign head to temp and move temp till it reach to seond last node .Assign last node to some other variable. and add it to first node and declair it as head

 code :-
		 /**
		 * Definition for singly-linked list.
		 * type ListNode struct {
		 *     Val int
		 *     Next *ListNode
		 * }
		 */
		func rotateRight(head *ListNode, k int) *ListNode {
		    for i:=0;i<k;i++{
		          temp:=head
		          for temp.Next.Next !=nil{
		            temp=temp.Next
		          }
		        end:=temp.Next
		        end.Next=head
		        end=head
		    }
		    return head
		    
		}
TC:- o(kxN) --k time rotation each k time rotation n node need to traverse
SC :- o(1)

2 Approch:-

k<len of link list and k>len of linklist


if we make any rotation in multiple if len we get the same linklist
if k>len we can do k=k%len  ex-->len=5 k=12  k=12%5=10 

1. count the lenght of the linklist 
2.last node next point to head so circular linklist will create
3. get the lenth- kth node and point it to null

TC o(N) to count the number of nodes+o(N-(N%k)) traversing k from head 
    ~== o(N)
SC o(1)

code :-

func rotateRight(head *ListNode, k int) *ListNode {
    if head==nil ||head.Next==nil || k==0 {
        return head
    }
    temp:=head
    leng:=1
    for temp.Next!=nil{
          leng++
        temp=temp.Next
      
    }
    
    temp.Next=head
    k=k%leng
    k=leng-k
    
    //now temp is on head 
    for k!=0{
        temp=temp.Next
    }
    
  head=temp.Next
    temp.Next=nil
    return head
}

//java code
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
      if(head == null||head.next == null||k == 0) return head;
    //calculating length
    ListNode temp = head;
    int length = 1;
    while(temp.next != null) {
        ++length;
        temp = temp.next;
    }
    //link last node to first node
    temp.next = head;
    k = k%length; //when k is more than length of list
    int end = length-k; //to get end of the list
    while(end--!=0) temp = temp.next;
    //breaking last node link and pointing to NULL
    head = temp.next;
    temp.next = null;
        
    return head;
    }  
    
}


Question2:-

485. Max Consecutive Ones
Input: nums = [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.

Explanation:-
count  will count current count of 1
finalcount is count of max consecutive 1


code :-

func findMaxConsecutiveOnes(nums []int) int {
     
            l:=len(nums)
                finalCount:=0
            count:=0
            for i:=0;i<l;i++{
                if nums[i] ==1 {
                    count++
                      if finalCount<count{
                         finalCount=count    
                    }
                    continue
                }else{                  
                        count=0
                        continue                   
                }                
            }
    return finalCount
    
}

Tc-O(N)
SC-o(1)
